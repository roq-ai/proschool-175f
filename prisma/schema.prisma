generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model analytics {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student_id  String   @db.Uuid
  course_id   String   @db.Uuid
  grade       Int?
  attendance  Int?
  performance String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  course      course   @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student     student  @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model course {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(255)
  description     String?      @db.VarChar(255)
  teacher_id      String       @db.Uuid
  student_id      String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  analytics       analytics[]
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student         student      @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher         teacher      @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar(255)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  course      course[]
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student     student[]
  teacher     teacher[]
}

model student {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  grade           Int
  class           String       @db.VarChar(255)
  enrollment_date DateTime     @db.Timestamp(6)
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  analytics       analytics[]
  course          course[]
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model teacher {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject         String       @db.VarChar(255)
  hired_date      DateTime     @db.Timestamp(6)
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  course          course[]
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  organization organization[]
  student      student[]
  teacher      teacher[]
}
